<squawk xmlns="http://www.sun.com/squawk/version/1.1">

  <suite>suiteName</suite>
  <statics>12</statics>
  <interface_methods>4</interface_methods>


** Example of a proxy class **


  <class>
    <name>Ljava/lang/Foobar;</name>

    <static_variables>
      <var>
        <protected/>
        <name>count-66</name>
      </var>
    </static_variables>

    <instance_variables>
      <var>
        <package/>
        <name>count-66</name>
      </var>
    </instance_variables>

    <methods>
      <method>
        <public/>
        <name>getField-12-45-67-89</name>
      </method>
    </methods>

  </class>


** Example of a proxy interface **


  <interface>
    <name>Ljava/lang/Fooable;</name>

    <methods>
      <method>
        <public/>
        <type>12</type>
        <name>fooit-99</name>
      </method>
    </methods>

  </interface>


** Example of a regular class **

  <class>
    <interface/>                                        // If it is an interface
    <abstract/>                                         // If it is abstract
    <name>Ljava/lang/Foobar;</name>

    <extends>
      <type>34</type>
    </extends>

    <implements>
      <type>167</type>
      <type>122</type>
    </implements>

    <arrayof>
      <type>35</type>
    </arrayof>

    <class_references>
      <type>167</type>
      <type>122</type>
    </class_references>

    <constants>
      <string>Squawk!</string>                          // Constant "Squawk!"
      <int_array>1 2 3</int_array>                      // Constant int[]{ 1, 2, 3 }
      <float_array>4.3 5.2</float_array>                // Constant float[]{ 4.3, 5.2 }
    </constants>

    <static_variables>
      <var>
        <package_private/>
        <type>12</type>
        <name>count</name>
      </var>
    </static_variables>

    <instance_variables>
      <var>
        <private/>
        <type>12</type>
        <name>count</name>
      </var>
    </instance_variables>

    <methods>
      <method>
        <type>12</type>
        <name>getField-12-45-67-89</name>
      </method>
    </methods>

    <interface_map>
      <from>6</from><to>4</to>          // Map interface 6 to method 4
      <from>7</from><to>9</to>          // Map interface 7 to method 9
      <from>8</from><to>22</to>         // Map interface 8 to method 22
    </interface_map>
  </class>


</squawk>














1       pushi
2       pushr
3       addi
4       addr
5       ldi
6
6
7
8
9
10
11
12
13
14
15









Imaginary Class section
Proxy Class section
Defined Interface section
Defined Class section
Methods







// Suite file

MAGIC   02031957

UTF8    "SuiteName"
UTF8    "Proxy Class Names"
UTF8    "Defined Class Names"

// ****************************** Classes ******************************


SHORT   6               // Number of class data entries

// Class 10

SHORT   10              // Relative class number
SHORT   att             // Attributes
SHORT   n               // Superclass number

SHORT   n               // Number of interfaces implemented
SHORT   y               //
SHORT   y               // Interface list
SHORT   y               //

UTF8    "fields"        // fields
UTF8    "methods"       // methods

SHORT   n               // Number of class references
SHORT   y               //
SHORT   y               // Class list
SHORT   y               //

UTF8    "strings"       // String references

// ****************************** Methods ******************************

SHORT   7               // Number of methods

// Method 17 for class 10



SHORT   n               // Method length
SHORT   10              // Class
SHORT   17              // Slot
UTF8    "locals"        // Local variable definitions

SHORT   n               // Activation record size
SHORT   n               // Number of parameters

SHORT   N               // Number of handler table entries

SHORT   start           //
SHORT   end             // N handler entries
SHORT   handler         //
SHORT   class           //

BYTE    n               // Bytecode at offset 0
BYTE    n               //
BYTE    n               //
BYTE    n               // Bytecodes
BYTE    n               //
BYTE    n               //
BYTE    n               //




















If the class is an interface it will have an <interface/> tag, if it is abstract it will have an <abstract/> tag.
Array Classes
Classes are also used to describe array types. Such array classes can be for primitive data types or arrays of other class types.

The following is a one-dimensional array of the java.lang.Foobar class defined above.

<squawk xmlns="http://www.sun.com/squawk/version/1.0">
  <class>
    <number>124</number>
    <extends>1</extends>
    <name>[Ljava.lang.Foobar;</name>
    <arrayof>123</arrayof>
  </class>
</squawk>

The following is a two dimensional array of java.lang.Foobar (based on class 124 above).

<squawk xmlns="http://www.sun.com/squawk/version/1.0">
  <class>
    <number>128</number>
    <extends>1</extends>
    <name>[[Ljava.lang.Foobar;</name>
    <arrayof>124</arrayof>
  </class>
</squawk>
Methods
There are two types of method invocation. Virtual method invocation, and interface method invocation. (Java ‘static’ methods so not exist as such. They are translated to be virtual methods that have a null receiver object.)  Each method is associated with an entry in a “vtable". Virtual methods are presented to the VM as being at a vtable offset of a class. Interface methods are presented as being at an offset to a global vtable for interface methods. Each class that implements an interface method contains a mapping that shows which virtual method should be called for each interface method defined.

Certain slot offsets are reserved for methods that have special meanings.

        Slot 0          <clinit>
        Slot 1          <init>
        Slot2           main(String[] args)
        Slot3           finalize()
Method definitions
The following is the section of some class definition where a virtual method number 12 is defined. It has six local variables, and variables 1, 3, and 5 are initialized with parameters 2, 1, and 3 of the callers invoke instruction. There are four instructions in the method.

<squawk xmlns="http://www.sun.com/squawk/version/1.0">
  <class>
    <number>123</number>
    <method>
      <slot>12</slot>
      <local_variables>
        <ref/>                          // Local variable number 0
        <word/>                         // Local variable number 1
        <word/>                         // Local variable number 2
        <word/>                         // Local variable number 3
        <dword/>                                // Local variable number 4
        <dword/>                                // Local variable number 5
      </local_variables>
      <parameter_map>
        <from>1</from><to>3</to>        // Copy parameter 1 to local 3
        <from>2</from><to>1</to>        // Copy parameter 2 to local 1
        <from>3</from><to>5</to>        // Copy parameter 3 to local 5
      </parameter_map>
      <instructions>
        <i>addf  2 1 3</i>              // Instruction number 0
        <i>f2d 4 2</i>                  // Instruction number 1
        <i>cmpgd 2 4 5</i>              // Instruction number 2
        <i>ifeq 2 #0 $5</i>             // Instruction number 3
        <i>ret #1</i>                   // Instruction number 4
        <i>ret #4</i>                   // Instruction number 5
      </instructions>
    </method>
  </class>
</squawk>

Methods can be defined in terms of a different super class slot.

<squawk xmlns="http://www.sun.com/squawk/version/1.0">
  <class>
    <number>123</number>
    <extends>1</extends>
    <name>Ljava.lang.Sausage;</name>
    <method>
      <slot>44</slot>
      <super>23</super>
    </method>
  </class>
</squawk>

Abstract methods can be defined thus:

<squawk xmlns="http://www.sun.com/squawk/version/1.0">
  <class>
    <number>456</number>
    <extends>1</extends>
    <name>Ljava.lang.BunchOfGerbils;</name>
    <method>
      <slot>88</slot>
      <abstract/>
    </method>
  </class>
</squawk>
Interface Method map
Interface methods are mapped from a system-wide indexing system to the methods in a class.  Every method of an interface is assigned a unique number. This number is used to invoke an interface in a class. The interface method map is used to map the interface number to a virtual method.








Ljava/lang/Object;
Ljava/lang/Class;
Ljava/lang/Native;
Ljava/lang/Math;
Ljava/lang/String;
Ljava/lang/Thread;
Ljava/lang/Isolate;
Ljava/lang/System;
Ljava/lang/StringBuffer;
Ljava/lang/Throwable;
Ljava/lang/Error;
Ljava/lang/Exception;
Ljava/lang/_void_;
Ljava/lang/_int_;
Ljava/lang/_long_;
Ljava/lang/_float_;
Ljava/lang/_double_;
Ljava/lang/_boolean_;
Ljava/lang/_char_;
Ljava/lang/_short_;
Ljava/lang/_byte_;
[Ljava/lang/Object;
[Ljava/lang/String;
[Ljava/lang/Class;
[Ljava/lang/Thread;
[Ljava/lang/_void_;
[Ljava/lang/_int_;
[Ljava/lang/_long_;
[Ljava/lang/_float_;
[Ljava/lang/_double_;
[Ljava/lang/_boolean_
[Ljava/lang/_char_;
[Ljava/lang/_short_;
[Ljava/lang/_byte_;
[[Ljava/lang/_byte_;
























suite {

    name        SuiteName
    proxys      proxy class list
    classes     normal class list

    interface {
        number      5
        super       1
        access      protected
        extends     123 456
        methods     toString-6 setString-6-6
    }

    class {
        number      10
        super       1
        access      public
        implements  5 6 7
        fields      count-3 offset-3 value-12
        methods     toString-6 setString-6-6 getFoo-43-12-45-55:protected
        classes     1 3 13 123
        strings     str%20ing string string string
    }

    code {
        class       10
        slot        17
        parms       3
        locals      result-3 index-3 i-5
        handlers    3-8-10-21 31-44-45-78
        bytes       123 32 345 765 234 65
    }
}